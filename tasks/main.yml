---
# Haproxy Configuration Role
# vim:ft=ansible:ts=2:et:
- name: "Print {{ _haproxy.instance_name }}"
  ansible.builtin.debug:
    msg: "Configuring {{ _haproxy.instance_name }}"

- name: Configure HAProxy chroot
  when: _haproxy.chroot is defined
  block:
    - name: Create chroot
      ansible.builtin.file:
        name: "{{ _haproxy.chroot.directory }}"
        state: directory
        owner: root
        group: haproxy
        mode: 0550
    - name: Create chroot/dev for rsyslog
      ansible.builtin.file:
        name: "{{ _haproxy.chroot.directory }}/dev"
        state: directory
        owner: root
        group: haproxy
        mode: 0550
    - name: Create rsyslog config for chroot
      ansible.builtin.template:
        src: "etc/rsyslog.d/haproxy.conf.j2"
        dest: "/etc/rsyslog.d/49-haproxy-{{ _haproxy.instance_name }}.conf"
        mode: 0644
      register: rsyslog
      notify: Restart rsyslog

- name: Create haproxy config directory
  ansible.builtin.file:
    path: "/etc/{{ _haproxy.instance_name }}"
    state: directory
    owner: root
    group: haproxy
    mode: 0755

- name: Create HAProxy systemd helper script
  ansible.builtin.file:
    path: "/var/lib/systemd/deb-systemd-helper-enabled/multi-user.target.wants/{{ _haproxy.instance_name }}.service"
    state: "touch"
    owner: root
    group: root
    mode: "0644"
    access_time: preserve
    modification_time: preserve

- name: Create systemd unit file
  ansible.builtin.template:
    src: "etc/systemd/system/haproxy.service.j2"
    dest: "/etc/systemd/system/{{ _haproxy.instance_name }}.service"
    owner: root
    group: root
    mode: "0644"

- name: Configure Service Autostart
  ansible.builtin.systemd:
    name: "{{ _haproxy.instance_name }}"
    enabled: "{{ _haproxy.autostart }}"

- name: Check certificates to be copied
  ansible.builtin.stat:
    path: "files/etc/{{ _haproxy.instance_name }}/ssl"
  register: ssl_dir
  delegate_to: localhost

- name: Configure SSL Directory
  when: ssl_dir.stat.exists
  block:
    - name: Install SSL certificates and keys
      ansible.builtin.copy:
        src: "etc/{{ _haproxy.instance_name }}/ssl"
        dest: "/etc/{{ _haproxy.instance_name }}"
        owner: root
        group: haproxy
        mode: 0640
      register: certificates
      notify: Reload haproxy {{ _haproxy.instance_name }}
    - name: Inform external collector about our certificate location
      ansible.builtin.lineinfile:
        dest: /etc/cert_exp_time_globs
        owner: root
        group: root
        mode: 0644
        create: yes
        line: "/etc/{{ _haproxy.instance_name }}/ssl/*"

- name: Configure HAProxy Error files
  when: _haproxy.error_files is defined
  block:
    - name: Create errorfiles directory
      ansible.builtin.file:
        path: "/etc/{{ _haproxy.instance_name }}/errorfiles"
        state: directory
        owner: root
        group: haproxy
        mode: 0755

    - name: Copy HAProxy error message files
      ansible.builtin.copy:
        src: "etc/{{ _haproxy.instance_name }}/errorfiles/{{ item }}"
        dest: "/etc/{{ _haproxy.instance_name }}/errorfiles/{{ item }}"
        owner: root
        group: haproxy
        mode: 0640
      with_items: "{{ _haproxy.error_files }}"
      register: error_files
      notify: Reload haproxy {{ _haproxy.instance_name }}

- name: Copy additional configuration files
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "/etc/{{ _haproxy.instance_name }}/{{ item | basename }}"
    owner: root
    group: haproxy
    mode: 0640
  with_fileglob: "files/etc/{{ _haproxy.instance_name }}/*"
  notify: Reload haproxy {{ _haproxy.instance_name }}

- name: Ensure token map file exists
  ansible.builtin.file:
    name: "{{ _haproxy.token_map_file.path }}"
    state: touch
    owner: "{{ _haproxy.token_map_file.owner }}"
    group: "{{ _haproxy.token_map_file.group }}"
    mode: "{{ _haproxy.token_map_file.mode }}"
  when: _haproxy.token_map_file is defined

- name: Configure HAProxy IP blacklist file
  ansible.builtin.template:
    src: "etc/haproxy/ip_blacklist.j2"
    dest:  "/etc/{{ _haproxy.instance_name }}/ip_blacklist"
    owner: root
    group: haproxy
    mode: 0640
  when: _haproxy.ip_blacklist is defined and _haproxy.ip_blacklist | length > 0

- name: Remove HAProxy IP blacklist file
  ansible.builtin.file:
    path: /etc/haproxy/ip_blacklist
    state: absent
  when: _haproxy.ip_blacklist is undefined or _haproxy.ip_blacklist | length == 0

- name: Create HAProxy configuration file
  ansible.builtin.template:
    src: "{% if _haproxy.use_default_template %}etc/haproxy/__role_default_haproxy.cfg__.j2{% else %}etc/{{ _haproxy.instance_name }}/{{ _haproxy.instance_name }}.cfg{% if _haproxy.use_consul_template %}.ctpl{% endif %}.j2{% endif %}"
    dest: "/etc/{{ _haproxy.instance_name }}/{{ _haproxy.instance_name }}.cfg{% if _haproxy.use_consul_template %}.ctpl{% endif %}"
    owner: root
    group: haproxy
    mode: 0640
  register: configuration
  notify: Reload haproxy {{ _haproxy.instance_name }}
